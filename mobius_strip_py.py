# -*- coding: utf-8 -*-
"""mobius_strip.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1G1ZviGh9QBH2fRMns3ooXy2Hjz1QDpej
"""

import matplotlib.pyplot as plt
import numpy as np
from scipy.integrate import simpson

def mobius_strip(r,w,n):
  u = np.linspace(0, 2*np.pi, n)
  v = np.linspace(-w/2, w/2, n)
  u,v = np.meshgrid(u,v)
  x = (r + v*np.cos(u/2))*np.cos(u)
  y = (r + v*np.cos(u/2))*np.sin(u)
  z = v * np.sin(u/2)
  return x,y,z,u,v

def plot(x,y,z):
  fig = plt.figure()
  rx = fig.add_subplot(111, projection='3d')
  rx.plot_surface(x,y,z,cmap='viridis')
  rx.set_xlabel('x')
  rx.set_ylabel('y')
  rx.set_zlabel('z')
  rx.set_title('Mobius Strip')
  plt.show()

def surface_area(x, y, z, u, v):
    # Compute partial derivatives
    dx_du = np.gradient(x, axis=1)
    dx_dv = np.gradient(x, axis=0)

    dy_du = np.gradient(y, axis=1)
    dy_dv = np.gradient(y, axis=0)

    dz_du = np.gradient(z, axis=1)
    dz_dv = np.gradient(z, axis=0)

    # Cross product of r_u × r_v
    cross_x = dy_du * dz_dv - dz_du * dy_dv
    cross_y = dz_du * dx_dv - dx_du * dz_dv
    cross_z = dx_du * dy_dv - dy_du * dx_dv

    # Magnitude of the cross product
    dA = np.sqrt(cross_x**2 + cross_y**2 + cross_z**2)

    # Integrate numerically using Simpson's rule
    area = simpson([simpson(row, u[0]) for row in dA], v[:,0])
    return area

def edge_length(x, y, z):
    # Take boundary curves at v = -w/2 and v = w/2 (first and last rows)
    x1, y1, z1 = x[0], y[0], z[0]      # lower edge
    x2, y2, z2 = x[-1], y[-1], z[-1]   # upper edge

    # Compute distances between successive points
    def curve_length(xc, yc, zc):
        dx = np.diff(xc)
        dy = np.diff(yc)
        dz = np.diff(zc)
        ds = np.sqrt(dx**2 + dy**2 + dz**2)
        return np.sum(ds)

    length1 = curve_length(x1, y1, z1)
    length2 = curve_length(x2, y2, z2)

    # The Möbius strip has only one continuous edge,
    # so we return the length of one full traversal (approximate)
    return (length1 + length2) / 2  # Average both to reduce discretization error

if __name__ == '__main__':
    r = 10
    w = 2
    n = 200
    x, y, z,u,v = mobius_strip(r, w, n)
    plot(x, y, z)

    area = surface_area(x, y, z, u, v)
    print(f"Approximate surface area: {area:.4f}")

    length = edge_length(x, y, z)
    print(f"Approximate edge length: {length:.4f}")